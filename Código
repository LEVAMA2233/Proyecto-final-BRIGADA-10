//CÓDIGO PARA GITHUB
/*°Ya almacena n alumnos
°Ya lee lo guardado en el archivo
°Ya puede buscar estudiante por número de cuenta
°Ya calcula promedio
°Ya modifica calificación*/
#include <stdio.h>
#include <string.h>


// Estructura tipo PUMA
struct PUMA{
    int numeroCuenta;
    char nombre[50];
    float calificacion[7];
};

// Prototipos de funciones
void muestraDatos(struct PUMA estudiante);
void Promedio(struct PUMA estudiante);
void mostrarTodosLosEstudiantes(FILE *archivo);
void agregarEstudiante(FILE *archivo);
void buscarEstudiante(FILE *archivo);

//Fin de prototipos de funciones

int main() {
	const char *ruta = "C:\\Users\\IdeaPad\\Documents\\finally.txt";
    FILE *archivo = fopen(ruta, "a+");

    if (archivo == NULL) {
        printf("Hubo un error al abrir el archivo");
        return 1;
    }

    int opcion;

    do {
        printf("\n*** Sistema de Gestion de Estudiantes BRIGADA 10***\n");
        printf("\nELIJA QUE ACCION REALIZAR, 4 PARA SALIR\n");
        printf("1. Mostrar todos los estudiantes\n");
        printf("2. Agregar estudiante\n");
        printf("3. Buscar estudiante por número de cuenta\n");
        printf("4. Salir\n");
        printf("Ingrese su opcion: ");
        scanf("%d", &opcion);
        printf("\n");

        switch (opcion) {
            case 1:
            	printf("MOSTRANDO ESTDUDIANTES\n");
                printf("-------------------------------\n");
				mostrarTodosLosEstudiantes(archivo);
				
                break;
            case 2:
                agregarEstudiante(archivo);
                break;
            case 3:
                buscarEstudiante(archivo);
                break;
            case 4:
                printf("Saliendo del programa...\n");
                break;
            default:
                printf("Opcion no valida. Intente de nuevo.\n");
        }
    } while (opcion != 4);

    fclose(archivo);

    return 0;
}//Fin de main


void muestraDatos(struct PUMA estudiante) {
    printf("Numero de cuenta: %d\n", estudiante.numeroCuenta);
    printf("Nombre: %s\n", estudiante.nombre);
    printf("Calificacion Algebra: %.2f\n", estudiante.calificacion[0]);
    printf("Calificacion Calculo y geometria: %.2f\n", estudiante.calificacion[1]);
    printf("Calificacion Quimica: %.2f\n", estudiante.calificacion[2]);
    printf("Calificacion Laboratorio de quimica: %.2f\n", estudiante.calificacion[3]);
    printf("Calificacion Fundamentos de programacion: %.2f\n", estudiante.calificacion[4]);
    printf("Calificacion Redaccion y exposicion: %.2f\n", estudiante.calificacion[5]);
    printf("Calificacion Igualdad de genero: %.2f\n", estudiante.calificacion[6]);
}


void Promedio(struct PUMA estudiante) {
    float promedio = 
	(estudiante.calificacion[0] + estudiante.calificacion[1]+estudiante.calificacion[2]
	+estudiante.calificacion[3]+estudiante.calificacion[4]+estudiante.calificacion[5]
	+estudiante.calificacion[6]) / 7;
    printf("Promedio general alumno,cuenta:[%d]--> %.2f\n",estudiante.numeroCuenta, promedio);
}


void mostrarTodosLosEstudiantes(FILE *archivo) {
    rewind(archivo); // Regresa al inicio del archivo

    struct PUMA estudiante;

    while (fscanf(archivo, "%d %s %f %f %f %f %f %f %f",
            &estudiante.numeroCuenta, estudiante.nombre,
            &estudiante.calificacion[0], &estudiante.calificacion[1],
			&estudiante.calificacion[2],&estudiante.calificacion[3],
			&estudiante.calificacion[4],&estudiante.calificacion[5],
			&estudiante.calificacion[6])== 9) {//la función fscanf devuelve un 9 si logra leer correctamente
											  // los 9 datos de la estructura estudiante, esto se repite
        muestraDatos(estudiante);             //para cada alumno
        Promedio(estudiante);
        printf("-------------------------------\n");
    }
}


void agregarEstudiante(FILE *archivo) {
    struct PUMA nuevoEstudiante;

    printf("Ingrese el numero de cuenta del estudiante: ");
    scanf("%d", &nuevoEstudiante.numeroCuenta);

    printf("Ingrese el nombre del estudiante(Empezando por apellido Paterno y separando con ""_""):" );
    scanf("%s", nuevoEstudiante.nombre);//El nombre se ingresa sin espacios para evitar errores

    printf("Ingrese la calificacion de Algebra: ");
    scanf("%f", &nuevoEstudiante.calificacion[0]);

    printf("Ingrese la calificacion de Calculo y geometria analitica: ");
    scanf("%f", &nuevoEstudiante.calificacion[1]);
    
    printf("Ingrese la calificacion de Quimica: ");
    scanf("%f", &nuevoEstudiante.calificacion[2]);
    
    printf("Ingrese la calificacion de Laboratorio de quimica: ");
    scanf("%f", &nuevoEstudiante.calificacion[3]);
    
    printf("Ingrese la calificacion de Fundamentos de programacion: ");
    scanf("%f", &nuevoEstudiante.calificacion[4]);
    
    printf("Ingrese la calificacion de Redaccion y exposicion de temas: ");
    scanf("%f", &nuevoEstudiante.calificacion[5]);
    
    printf("Ingrese la calificacion de Igualdad de genero: ");
    scanf("%f", &nuevoEstudiante.calificacion[6]);

    fprintf(archivo, "%d %s %.2f %.2f %.2f %.2f %.2f %.2f %.2f\n",
            nuevoEstudiante.numeroCuenta, nuevoEstudiante.nombre,
            nuevoEstudiante.calificacion[0], nuevoEstudiante.calificacion[1],nuevoEstudiante.calificacion[2],
			nuevoEstudiante.calificacion[3],nuevoEstudiante.calificacion[4],nuevoEstudiante.calificacion[5],
			nuevoEstudiante.calificacion[6]);

    printf("Estudiante agregado correctamente.\n");
}


void agregarEstudiante(FILE *archivo) {
    struct PUMA nuevoEstudiante,estudianteExistente;

    printf("Ingrese el numero de cuenta del nuevo estudiante: ");
    scanf("%d", &nuevoEstudiante.numeroCuenta);

    rewind(archivo);
    
    while (fscanf(archivo, "%d", &estudianteExistente.numeroCuenta) == 1) {//verifica uno a uno
    																	   //los números de cuenta	
        if (estudianteExistente.numeroCuenta == nuevoEstudiante.numeroCuenta) {
            printf("Error: El numero de cuenta ya existe. No se puede agregar el estudiante.\n");
            return;
        }
        while (fgetc(archivo) != '\n' && !feof(archivo)) {}
    }

    // Resto del ingreso de datos
    printf("Ingrese el nombre del estudiante (Empezando por apellido Paterno y separando con '_'):");
    scanf("%s", nuevoEstudiante.nombre);

    printf("Ingrese la calificacion de Algebra: ");
    scanf("%f", &nuevoEstudiante.calificacion[0]);

    printf("Ingrese la calificacion de Calculo y geometria analitica: ");
    scanf("%f", &nuevoEstudiante.calificacion[1]);

    printf("Ingrese la calificacion de Quimica: ");
    scanf("%f", &nuevoEstudiante.calificacion[2]);

    printf("Ingrese la calificacion de Laboratorio de quimica: ");
    scanf("%f", &nuevoEstudiante.calificacion[3]);

    printf("Ingrese la calificacion de Fundamentos de programacion: ");
    scanf("%f", &nuevoEstudiante.calificacion[4]);

    printf("Ingrese la calificacion de Redaccion y exposicion de temas: ");
    scanf("%f", &nuevoEstudiante.calificacion[5]);

    printf("Ingrese la calificacion de Igualdad de genero: ");
    scanf("%f", &nuevoEstudiante.calificacion[6]);

    // Agregar el estudiante solo si el número de cuenta no existe
    fprintf(archivo, "%d %s %.2f %.2f %.2f %.2f %.2f %.2f %.2f\n",
            nuevoEstudiante.numeroCuenta, nuevoEstudiante.nombre,
            nuevoEstudiante.calificacion[0], nuevoEstudiante.calificacion[1], nuevoEstudiante.calificacion[2],
            nuevoEstudiante.calificacion[3], nuevoEstudiante.calificacion[4], nuevoEstudiante.calificacion[5],
            nuevoEstudiante.calificacion[6]);

    printf("Estudiante agregado correctamente.\n");
}



void modificarCalificacion(FILE *archivo) {
    int numeroCuentaModificar;
    int materiaModificar;

    printf("Ingrese el numero de cuenta del estudiante: ");
    scanf("%d", &numeroCuentaModificar);

    printf("Ingrese el número de la materia a modificar (1-7):\n");
    scanf("%d", &materiaModificar);

    if (materiaModificar < 1 || materiaModificar > 7) {//Se valida que la materia exista
        printf("Número de materia no válido.\n");
        return;
    }

    struct PUMA estudiante;

    // Creamos un archivo temporal para almacenar los datos con la modificación
    FILE *archivoNuevo = fopen("modificaCALF.txt", "w");//Se abre en modo escritura para modificar todo
    rewind(archivo);//Regresamos al inicio del archivo

    while (fscanf(archivo, "%d %s %f %f %f %f %f %f %f",
                  &estudiante.numeroCuenta, estudiante.nombre,
                  &estudiante.calificacion[0], &estudiante.calificacion[1],
                  &estudiante.calificacion[2], &estudiante.calificacion[3],
                  &estudiante.calificacion[4], &estudiante.calificacion[5],
                  &estudiante.calificacion[6]) == 9) {

        if (estudiante.numeroCuenta == numeroCuentaModificar) {
            printf("Calificación actual en la materia %d: %.2f\n", materiaModificar,
                   estudiante.calificacion[materiaModificar - 1]);

            printf("Ingrese la nueva calificación en la materia %d: ", materiaModificar);
            scanf("%f", &estudiante.calificacion[materiaModificar - 1]);
        }

        fprintf(archivoNuevo, "%d %s %.2f %.2f %.2f %.2f %.2f %.2f %.2f\n",
                estudiante.numeroCuenta, estudiante.nombre,
                estudiante.calificacion[0], estudiante.calificacion[1], estudiante.calificacion[2],
                estudiante.calificacion[3], estudiante.calificacion[4], estudiante.calificacion[5],
                estudiante.calificacion[6]);//Volvemos a escribir los datos en el archivo Nuevo
    }

    fclose(archivoNuevo);//Cerramos los archivos
    fclose(archivo);      

    remove("finally.txt");             // Elimina el archivo original
    rename("modificaCALF.txt", "finally.txt"); // Renombra el archivo temporal

    printf("Calificacion modificada correctamente.\n");
}
